sets <- c(sets, list(values))
}
return(sets)
}
runnparsesets <- function(sets, alignment, model, cores){
calci <- function(i, j, l) (l - 0.5) * i - l - (i ^ 2)/2 + j
getindices <- function(labels, alllabels){
l <- length(alllabels)
ilis <- lapply(1:(length(labels) - 1), function(li){
n1 <- which(alllabels == labels[li])
n2 <- which(alllabels %in% labels[(li + 1):length(labels)])
sapply(n2, function(j) calci(n1, j, l))
})
return(unlist(ilis))
}
allvalues <- names(alignment)
bf <- base.freq(alignment)
distout <- mclapply(sets, function(set){
ds <- dist.dna(alignment[set], model = model, pairwise.deletion = T, base.freq = bf)
return(cbind(getindices(attr(ds, "Labels"), allvalues), ds))
}, mc.cores = cores)
distout <- do.call('rbind', distout)
distout <- distout[!duplicated(distout[,1]), ]
distout <- distout[order(distout[,1]),2]
return(makedist(distout, labels = allvalues, method = model))
}
dist_1d_to_2d <- function (k, dist_obj) {
if (!inherits(dist_obj, "dist")) stop("please provide a 'dist' object")
n <- attr(dist_obj, "Size")
valid <- (k >= 1) & (k <= n * (n - 1) / 2)
k_valid <- k[valid]
j <- rep.int(NA_real_, length(k))
j[valid] <- floor(((2 * n + 1) - sqrt((2 * n - 1) ^ 2 - 8 * (k_valid - 1))) / 2)
i <- j + k - (2 * n - j) * (j - 1) / 2
c(i, j)
}
makedist <- function(x, size = NULL, labels = NULL, method = NULL){
if( is.null(size) & is.null(labels) ){
stop("requires at least one of size or labels")
} else if ( ! is.null(labels) ){
attr(x, "Size") <- length(labels)
attr(x, "Labels") <- labels
} else if ( ! is.null(size) ){
attr(x, "Size") <- size
}
attr(x, "Diag") <- attr(x, "Upper") <- F
if( ! is.null(method) ){
attr(x, "method") <- method
}
class(x) <- "dist"
return(x)
}
subsetdist <- function(dist, subset){
if( is.character(subset) ){
mat.idx <- match(subset, attr(dist, "Labels"))
labels <- subset
size <- NULL
} else if ( is.logical(subset) ){
mat.idx <- which(subset)
labels <- NULL
size <- sum(subset)
} else if ( is.numeric(subset) && all(subset == floor(subset)) ){
mat.idx <- subset
labels <- NULL
size <- length(subset)
} else {
stop("subset should be character, logical or interger numeric vector")
}
size <- attr(dist, "Size")
dist.idx <- unlist(sapply(1:(length(mat.idx)-1), function(x){
sapply( (x+1):length(mat.idx), function(y){
dist_2d_to_1d(mat.idx[x], mat.idx[y], size)
})
}))
return(makedist(dist[dist.idx], size = size, labels = labels,
method = attr(dist, "method")))
}
upgma_partial_withdistmat <- function(distmat, distmax, cores, startsize){
# Cluster the sequences
suppressMessages(require(cluster))
ngroups <- floor(attr(distmat, "Size") / startsize)
cl <- pam(distmat, ngroups, diss = T)
# Make sure the largest cluster is not larger than distmax
while( max(table(cl$clustering)) > distmax ){
ngroups <- floor(ngroups + 0.25 * ngroups)
cl <- pam(distmat, ngroups, diss = T)
}
# Build trees for each cluster
grouptrees <- mclapply(1:ngroups, function(g){
contents <- names(cl$clustering)[cl$clustering == g]
distmat.sub <- subsetdist(distmat, contents)
upgma(distmat.sub)
}, mc.cores = cores)
names(grouptrees) <- cl$medoids
# Build a tree of the centroids
distmat.centroids <- subsetdist(distmat, cl$medoids)
tree <- upgma(distmat.centroids)
# Correct the branches of the centroid tree so that bound subtrees will
# remain ultrametric with respect to one another
tip.edges.idx <- match(1:Ntip(tree), tree$edge[,2])
grouptree.heights <- sapply(tree$tip.label, function(cn){
node.depth.edgelength(grouptrees[[cn]])[1] })
corrected.edges <- tree$edge.length[tip.edges.idx] - grouptree.heights
if( any(corrected.edges < 0) ){
corrected.edges <- corrected.edges + abs(min(corrected.edges))
}
tree$edge.length[tip.edges.idx] <- corrected.edges
# Bind the subtrees to the centroid tree
for(cn in tree$tip.label){
tree <- bind.tree(tree, grouptrees[[cn]], where = which(tree$tip.label == cn))
}
# This is the maximum height value for which cutting the tree will return
# realistic values
message("Heights on the constructed UPGMA tree are only realistic below ",
min(grouptree.heights))
return(tree)
}
partial.dist.dna <- function(x, i, j, cores, ...){
j <- j[! j %in% i]
pdist <- mclapply(data.frame(t(expand.grid(i, j))), function(ij){
dist.dna(x[ij], ...)
}, mc.cores = cores)
return(matrix(unlist(pdist), nrow = length(i), ncol = length(j), dimnames = list(i, j)))
}
greedy_cluster <- function(alignment, clustrad, model, cores){
clusters <- setNames(list(names(alignment)[1]), names(alignment[1]))
for(n in names(alignment[-1])){
ndist <- partial.dist.dna(alignment, n, names(clusters), cores,
model = model, pairwise.deletion = T)
if( min(ndist) <= clustrad ){
cent <- colnames(ndist)[which.min(ndist)]
clusters[[cent]] <- append(clusters[[cent]], n)
} else {
clusters[[n]] <- n
}
}
return(clusters)
}
lump_small_clusters <- function(clusters, alignment, minsize, model, cores){
sizes <- sapply(clusters, length)
while( any(sizes < minsize) ){
toosmall <- names(which.min(sizes))
close <- partial.dist.dna(alignment, toosmall, names(clusters), cores,
model = model, pairwise.deletion = T)
addto <- colnames(close)[which.min(close)]
clusters[[addto]] <- append(clusters[[addto]], clusters[[toosmall]])
clusters[[toosmall]] <- NULL
sizes <- sapply(clusters, length)
}
return(clusters)
}
upgma_partial <- function(alignment, distmax, model, cores){
# Determine the cluster radius
seq1dist <- partial.dist.dna(alignment, names(alignment)[1], names(alignment)[-1], cores,
model = model, pairwise.deletion = T)
seq1dist <- sort(seq1dist[1,])
clustrad <- round(seq1dist[distmax], 4)
# Do clustering, ensuring largest cluster is not larger than distmax
clusters <- setNames(list(names(alignment)), names(alignment)[1])
# Make sure the largest cluster is not larger than distmax
while( max(sapply(clusters, length)) > distmax ){
clusters <- greedy_cluster(alignment, clustrad, model, cores)
clusters <- lump_small_clusters(clusters, alignment,
minsize =  ceiling(0.1 * max(sapply(clusters, length))),
model, cores)
}
# Build trees for each cluster
grouptrees <- mclapply(clusters, function(clus){
distmat <- dist.dna(alignment[clus],  model = model, pairwise.deletion = T)
upgma(distmat)
}, mc.cores = cores)
# Build a tree of the centroids
distmat.centroids <- dist.dna(alignment[names(clusters)],  model = model, pairwise.deletion = T)
tree <- upgma(distmat.centroids)
# Correct the branches of the centroid tree so that bound subtrees will
# remain ultrametric with respect to one another
tip.edges.idx <- match(1:Ntip(tree), tree$edge[,2])
grouptree.heights <- sapply(tree$tip.label, function(cn){
node.depth.edgelength(grouptrees[[cn]])[1] })
corrected.edges <- tree$edge.length[tip.edges.idx] - grouptree.heights
if( any(corrected.edges < 0) ){
corrected.edges <- corrected.edges + abs(min(corrected.edges))
}
tree$edge.length[tip.edges.idx] <- corrected.edges
# Bind the subtrees to the centroid tree
for(cn in tree$tip.label){
tree <- bind.tree(tree, grouptrees[[cn]], where = which(tree$tip.label == cn))
}
# This is the maximum height value for which cutting the tree will return
# realistic values
message("Heights on the constructed UPGMA tree are only realistic below ",
min(grouptree.heights))
return(tree)
}
# Set up options ----------------------------------------------------------
spec <- matrix(c(
'help'     , 'h', 0, "logical",
'alignment', 'a', 1, "character",
'model'    , 'm', 2, "character",
'distmax'  , 'd', 2, "integer",
'cores'    , 'c', 2, "integer"
), byrow = T, ncol = 4)
# Read options
opt <- getopt(spec)
opt$alignment <-"~/programming/bioinformatics/metamate/tests/data/6_coleoptera_fftnsi.fasta"
opt$distmax <- 70
if ( !is.null(opt$help) ){
cat(getopt(spec, usage = T))
q(status = 1)
}
# Set defaults ------------------------------------------------------------
if( is.null(opt$alignment) ){
stop("Error: path to alignment is required")
}
if ( is.null(opt$model)    ) opt$model <- "F84"
if ( is.null(opt$distmax)  ) opt$distmax <- 65536
if ( is.null(opt$cores)    ) opt$cores <- 1
if( opt$distmax < 2 | opt$distmax > 65536){
stop("Error: -d/--distmax must be an greater than 1 and less than 65,537")
}
# Load in data ------------------------------------------------------------
alignment <- read.FASTA(opt$alignment)
# Create distance matrix and tree -----------------------------------------
# dist.dna can perform maximum 2^31-1 combinations. The maximum number of
# sequences generating this number of unique combinations is 65,536
# ncombos(65536) <= 2^31-1 #TRUE
# ncombos(65537) <= 2^31-1 #FALSE
# The limitation comes from the underlying C implementation of dist.dna
# Instead, we do a hacky workaround whereby we split up the data into a
# set of sets that contain all combinations, compute distances independently
# then rebuild the distance matrix.
length(alignment) <= opt$distmax
tree <- upgma_partial(alignment, opt$distmax, opt$model, opt$cores)
for(i in 1:10){
message("iteration", i)
}
for(i in 1:10){
message("iteration", i, appendLF = F)
}
for(i in 1:10){
message("iteration", i, "\r", appendLF = F)
}
# Determine the cluster radius
seq1dist <- partial.dist.dna(alignment, names(alignment)[1], names(alignment)[-1], cores,
model = model, pairwise.deletion = T)
seq1dist
Sys.time()
a <- Sys.time()
b <- Sys.time()
a-b
numeric(a-b)
as.numeric(a-b)
time <- difftime(Sys.time() - start)
difftime(Sys.time() - start)
Sys.time()
start
start <- Sys.time()
time <- difftime(Sys.time() - start)
difftime(Sys.time(), start)
difftime(Sys.time(), start)
difftime(Sys.time(), start)
difftime(Sys.time(), start)
difftime(Sys.time(), start)
difftime(Sys.time(), start)
difftime(Sys.time(), start)
difftime(Sys.time(), start)
difftime(Sys.time(), start)
difftime(Sys.time(), start)
difftime(Sys.time(), start)
difftime(Sys.time(), start)
difftime(Sys.time(), start)
difftime(Sys.time(), start)
difftime(Sys.time(), start)
difftime(Sys.time(), start)
difftime(Sys.time(), start)
difftime(Sys.time(), start)
difftime(Sys.time(), start)
difftime(Sys.time(), start)
difftime(Sys.time(), start)
difftime(Sys.time(), start)
difftime(Sys.time(), start)
difftime(Sys.time(), start)
difftime(Sys.time(), start)
difftime(Sys.time(), start)
difftime(Sys.time(), start)
difftime(Sys.time(), start)
difftime(Sys.time(), start)
difftime(Sys.time(), start)
difftime(Sys.time(), start)
difftime(Sys.time(), start)
difftime(Sys.time(), start)
difftime(Sys.time(), start)
difftime(Sys.time(), start)
difftime(Sys.time(), start, units = "secs")
difftime(Sys.time(), start)
difftime(Sys.time(), start, units = "secs")
round(difftime(Sys.time(), start, units = "secs"), 3)
difftime(Sys.time(), start, units = "secs", format = "%d")
as.numeric(difftime(Sys.time(), start, units = "secs"))
as.numeric(difftime(Sys.time(), start, units = "secs"))
install.packages("ggnewscale")
# Setup -------------------------------------------------------------------
rm(list = ls())
options(stringsAsFactors = F)
# Load libraries ----------------------------------------------------------
library(plyr)
library(dplyr)
library(reshape2)
library(ggplot2)
library(ggnewscale)
# Load functions ----------------------------------------------------------
#source("~/Documents/programming/bioinformatics/biotools/rscripts/")
# Load data ---------------------------------------------------------------
specnumbers <- read.csv("specnumbers.csv")
# Organise data -----------------------------------------------------------
specm <- melt(specnumbers, id.vars = c("taxon", "species"), variable.name = "group", value.name = "text")
short <- c('endemics' = 'e', 'threatened' = 't', 'both.endemic.and.threatened' = 'b', 'endemic.only' = 'eo', 'threatened.only' = 'to', 'not.endemic.or.threatened' = 'n')
specm$g <- short[as.character(specm$group)]
specm$g <- factor(specm$g, levels = c('n', 'eo', 'e', 'b', 't', 'to'))
specm <- specm[order(specm$taxon, as.numeric(specm$g)),]
specm$text[is.na(specm$text)] <- 0
specm$n <- as.numeric(gsub('\\*', '', specm$text))
specm$p <- specm$n/specm$species
specm$text <- ifelse(specm$text == 0 | is.na(specm$text), '', specm$text)
transformation = c('dung beetles'  = 1,
'mammals'       = 1/1.8,
'amphibians'    = 1,
'reptiles'      = 1,
'jewel scarabs' = 1,
'plants'        = 1/1.8,
'birds'         = 1/1.8,
'moon moths'    = 1,
'orchid bees'   = 1,
'hawk moths'    = 1
)
specm$nt<- (specm$n/pi) ^ transformation[specm$taxon]
specm$speciest <- dlply(specm, ~ taxon, function(x) rep(sum(x$nt[x$g %in% c('eo', 'to', 'b', 'n')], na.rm = T), nrow(x))) %>% unlist()
specm$pt <- specm$nt/specm$speciest
specm <- ddply(specm, ~taxon, function(x){
x[x$g=='e', 'pt'] <- sum(x[x$g %in% c('eo', 'b'), 'pt'], na.rm = T)
x[x$g=='t', 'pt'] <- sum(x[x$g %in% c('to', 'b'), 'pt'], na.rm = T)
return(x)
})
fills <- c('n', 'eo', 'b', 'to')
strokes <- c('n', 'e', 't')
specm_fill <- specm[specm$g %in% fills,]
# ggplot(data = specm_fill, aes(x = 1, y = p, fill = group)) +
#   geom_col(position = position_dodge(width = 0.3), width = 0.2) +
#   ylim(c(0, 1.01)) +
#   coord_polar('y', start = 0) +
#   theme_void() +
#   facet_wrap(~taxon)
#
#
# ggplot() +
#   geom_bar(data = specm_fill, aes(x = '', y = pt, fill = g), width = 1, stat = 'identity') +
#   scale_fill_manual(values = c("#377EB8", "#4DAF4A", "#c37f00", "#E45A1C")) +
#   coord_polar('y', start = 0) +
#   theme_void() +
#   facet_wrap(~taxon)
specm_fill <- ddply(specm_fill, ~taxon, function(x){
cbind(x, y = cumsum(c(0, x$pt))[-(nrow(x)+1)])
})
specm_stroke <- ddply(specm, ~ taxon, function(x){
cbind(x[x$g %in% strokes,], y = c(0, cumsum(x$pt[1:2])))
})
col3 = c("#377EB8", "#4DAF4A", "#E45A1C")
col4s =  c("#377EB8", "#4DAF4A", "#a25615", "#E45A1C")
col4f = c("#377EB8", "#4DAF4A", "#db7213", "#E45A1C")
ggplot() +
geom_rect(data = specm_stroke, aes(xmin = .015, xmax = 1, ymin = y + .001, ymax = y + pt - .001, col = g, fill = g), alpha = .6, size = 0.5) +
scale_fill_manual(values = col3, guide = F) +
scale_colour_manual(values = col3, guide = F) +
new_scale_colour()+
geom_text(data = specm_fill, aes(x = 0.7, y = (y + pt / 2), label = text, col = g), size = 5, fontface = 2) +
#scale_colour_manual(values = col4s, guide = F) +
new_scale_fill() +
new_scale_colour() +
geom_rect(data = data.frame(x = c(0,0,0,0), y = c('n', 'eo', 'b', 'to')),
aes(xmin = x, xmax = x, ymax = x, ymin = x, fill = y))+
scale_fill_manual(values = col4f, name = "Species Counts", labels = c("Neither Endemic \nor (Near) Threatened",
"Endemic", "Endemic and \n(Near) Threatened",
"(Near) Threatened")) +
#scale_colour_manual(values = col4s,  name = "Species Counts") +
xlim(c(0,1)) + ylim(c(0,1)) +
coord_polar('y', start = 0) +
theme_void() +
theme(legend.position = "bottom") +
facet_wrap(~taxon, nrow = 2)
ggsave("pies2.png", device = 'png', height = 5, width = 8, units = 'in')
cols = c("#4daf4a", "#feb24c", "#b10026", "#fc4e2a")
specm_fill$guide <- factor(setNames(c("Neither Endemic \nor (Near) Threatened", "Endemic", "Endemic and \n(Near) Threatened", "(Near) Threatened"),
c("n", "eo", "b", "to")
)[droplevels(specm_fill$g)],
levels = c("Neither Endemic \nor (Near) Threatened", "Endemic", "Endemic and \n(Near) Threatened", "(Near) Threatened"))
ggplot(specm_fill, aes(x = 0.7, y = (y + pt / 2), xmin = .015, xmax = 1, ymin = y + .001, ymax = y + pt - .001, col = guide, fill = guide, label = text))+
geom_rect(size = .5, alpha = .5) +
geom_text(size = 5, fontface = 2) +
scale_colour_manual(values = cols, name = "Species Counts") +
scale_fill_manual(values = cols, name = "Species Counts") +
guides(colour = guide_legend(override.aes = aes(label = "1"))) +
xlim(c(0,1)) + ylim(c(0,1)) +
coord_polar('y', start = 0) +
theme_void() +
theme(legend.position = "bottom") +
facet_wrap(~taxon, nrow = 2)
ggsave("pies3.png", device = 'png', height = 5, width = 8, units = 'in')
setwd("~/work/NHM_postdoc/iBioGen/MetagenWorkshop/LearnMetabarcoding/data_source/sectionD")
phy <- read.tree("GBcoleop_CCCP.tre")
library(ape)
phy <- read.tree("GBcoleop_CCCP.tre")
phy
phy$edge.length
phy$edge.length <- NULL
phy$edge.length <- NULL
phy
phy$node.label <- NULL
phy
write.tree(phy)
nwk <- write.tree(phy)
nwk <- substr(nwk, 1, nchar(nwk)-1)
nwk
nwk <- paste0("((MT862414,KU354434),MH891570),(((MW208844,NC_032283),MH155200),(((KT893459,EU854321),KX640825),(((JF927830,MN910279),MG989236),(((MK575474,(KT174472,MT043309)),((NC_036738,KY620270),FJ810212)),(",
nwk,
")))))));")
writeLines(nwk, "GBcoleop_GBarth_CCCP_bb.tre")
phy <- read.tree("GBcoleop_CCCP.tre")
phy$edge.length <- NULL
phy$node.label <- NULL
nwk <- write.tree(phy)
nwk <- substr(nwk, 1, nchar(nwk)-1)
nwk <- paste0("((MT862414,KU354434),MH891570),(((MW208844,NC_032283),MH155200),(((KT893459,EU854321),KX640825),(((JF927830,MN910279),MG989236),(((MK575474,(KT174472,MT043309)),((NC_036738,KY620270),FJ810212)),(",
nwk,
"))))));")
writeLines(nwk, "GBcoleop_GBarth_CCCP_bb.tre")
nwk
phy <- read.tree("GBcoleop_CCCP.tre")
phy$edge.length <- NULL
phy$node.label <- NULL
nwk <- write.tree(phy)
nwk <- substr(nwk, 1, nchar(nwk)-1)
writeLines(nwk, "GBcoleop_GBarth_CCCP_bb.tre")
library(ape)
phy <- read.tree("GBcoleop_CCCP.tre")
tax <- read.csv("GBcoleop_CCCP_taxonomy.csv")
tax[,-1]
apply(tax[,-1], function(x) paste0(x[x!=''], collapse='-'))
apply(tax[,-1], 1, function(x) paste0(x[x!=''], collapse='-'))
paste(tax[,1], apply(tax[,-1], 1, function(x) paste0(x[x!=''], collapse='-')), sep = '~')
setNames(paste(tax[,1], apply(tax[,-1], 1, function(x) paste0(x[x!=''], collapse='-')), sep = '~'), tax[,1])
tax <- setNames(paste(tax[,1], apply(tax[,-1], 1, function(x) paste0(x[x!=''], collapse='-')), sep = '~'), tax[,1])
tax[phy$tip.label]
phy$tip.label <- tax[phy$tip.label]
write.tree(phy, "GBcoleop_CCCP_RN.tre")
phy <- read.tree("GBcoleop_CCCP.tre")
tax <- read.csv("GBcoleop_CCCP_taxonomy.csv")
View(tax)
tax <- setNames(paste(tax[,1], apply(tax[,-1], 1, function(x) paste0(x[x!=''], collapse='-')), sep = '~'), tax[,1])
tax
phy$tip.label <- tax[phy$tip.label]
write.tree(phy, "GBcoleop_CCCP_RN.tre")
phy <- read.tree("GBcoleop_CCCP_reroot.tre")
phy <- read.tree("GBcoleop_CCCP_reroot.tre")
phy <- read.tree("GBcoleop_CCCP_reroot.tre")
phy <- read.tree("GBcoleop_CCCP_reroot.tre")
phy$node.label <- NULL
phy$edge.length <- NULL
nwk <- write.tree(phy)
nwk
arth <- "((MT862414,KU354434),MH891570),(((MW208844,NC_032283),MH155200),(((KT893459,EU854321),KX640825),(((JF927830,MN910279),MG989236),(((MK575474,(KT174472,MT043309)),((NC_036738,KY620270),FJ810212)),coleoptera))))));"
arth <- read.tree(text = arth)
arth <- "(((MT862414,KU354434),MH891570),(((MW208844,NC_032283),MH155200),(((KT893459,EU854321),KX640825),(((JF927830,MN910279),MG989236),((((KT174472,MT043309),MK575474),((NC_036738,KY620270),FJ810212)),coleoptera)))));"
arth <- read.tree(text = arth)
arth
arth <- bind.tree(arth, phy, which(arth$tip.label == "coleoptera"))
writeLines(arth, "GBcoleop_GBarth_CCCP_bb.tre")
write.tree(arth, "GBcoleop_GBarth_CCCP_bb.tre")
tax <- read.tsv("GBcoleop_CCCP_taxonomy.csv")
tax <- read.csv("GBcoleop_CCCP_taxonomy.csv")
apply(tax[,-1], 1, function(x) paste0(x[x!=""], collapse = ';'))
setNames(paste0("'", tax[,1], '-', apply(tax[,-1], 1, function(x) paste0(x[x!=""], collapse = ';')), "'"), tax[,1])
arth$tip.label <- setNames(paste0("'", tax[,1], '-', apply(tax[,-1], 1, function(x) paste0(x[x!=""], collapse = ';')), "'"), tax[,1])[arth$tip.label]
arth
write.tree(arth, "GBcoleop_GBarth_CCCP_bb_RN.tre")
read.csv("taxonomy_CCCPmtg.csv")
tax <- read.csv("taxonomy_CCCPmtg.csv")
tax <- read.csv("taxonomy_CCCPmtg.csv", header = F)
tax
tax[,10]
bc <- tax[,10]
bc <- bc[bc != ""]
md <- read.csv("CPBC_matchdata.csv")
md <- md[grepl("^col", md$morphospecies)]
md <- md[grepl("^col", md$morphospecies), ]
md <- md[!duplicated(md$morphospecies)]
md <- md[!duplicated(md$morphospecies), ]
md <- read.csv("CPBC_matchdata.csv")
md <- md[grepl("^col", md$morphospecies), ]
writeLines(md$seqname)
writeLines(md$seqname, "bcseqstokeep.txt")
tax <- read.csv("~/work/Imperial PhD/Genetics/2_morphospecies_metadata/morphospecies.csv")
tax
tax <- tax[, c(1, 5:13)]
tax
out <- merge(md, tax, by.x = "morphospecies", by.y = "taxon", all = F)
out
writeLines(out$seqname, "bcseqstokeep.txt")
out <- out[, c(2, 6:14, 1)]
out
write.csv(out, "taxonomy_CCCPbc.csv", row.names = F, quote = F, col.names = F)
write.csv(out, "taxonomy_CCCPbc.csv", row.names = F, quote = F, colnames = F)
write.csv(out, "taxonomy_CCCPbc.csv", row.names = F, quote = F)
